{"version":3,"sources":["environmentVariables.ts","app/App.tsx","features/counter/counterSlice.js","app/store.js","index.tsx"],"names":["EnvironmentVariables","Home","React","lazy","NotFound","App","Suspense","fallback","exact","path","component","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","a","rootElement","document","getElementById","window","envProd","process","Production","envDev","Development","console","log","ReactDOM","render","StrictMode","store"],"mappings":"qKAAKA,E,4EAAAA,K,0BAAAA,E,kBAAAA,E,yBAAAA,M,KAMUA,Q,8BCHTC,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAWF,IAAMC,MAAK,kBAAM,gCAEnB,SAASE,IACpB,OACI,cAAC,IAAD,UACI,cAAC,IAAMC,SAAP,CAAgBC,SAAU,6CAA1B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,cAAC,IAAD,CAAOQ,KAAK,IAAIC,UAAWN,W,YCVlCO,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAiBzDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,SCtCea,cAAe,CAC1BC,QAAS,CACLC,QAASC,KCwBjB,sBAAC,4BAAAC,EAAA,6DACSC,EAAkCC,SAASC,eAAe,QAEhEC,OAAOC,QAAUC,eAAmClC,EAAqBmC,WACzEH,OAAOI,OAASF,eAAmClC,EAAqBqC,YAJ3E,cAOWL,OAAOC,QAdfK,QAAQC,IAAI,QAIZD,QAAQC,IAAI,QAGf,OAWGC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACI,cAACtC,EAAD,QAEawB,GAhB5B,0CAAD,K","file":"static/js/main.2ba63141.chunk.js","sourcesContent":["enum EnvironmentVariables {\n    Development = 'development',\n    Staging = 'staging',\n    Production = 'production'\n}\n\nexport default EnvironmentVariables;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nconst Home = React.lazy(() => import(\"./pages/Home\"));\r\nconst NotFound = React.lazy(() => import(\"./pages/NotFound\"));\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <React.Suspense fallback={<div>Loading...</div>}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route path=\"*\" component={NotFound} />\r\n                </Switch>\r\n            </React.Suspense>\r\n        </Router>\r\n    );\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        counter: counterReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport '@popperjs/core';\n\nimport EnvironmentVariables from './environmentVariables';\n\nimport './app/styles/index.css';\n\nimport App from './app/App';\nimport store from './app/store';\n\ndeclare global {\n    type Guid = string;\n\n    interface Window {\n        envDev: boolean;\n        envProd: boolean;\n    }\n}\n\nfunction initProduction() {\n    console.log('prod');\n}\n\nfunction initDevelopment() {\n    console.log('dev');\n}\n\n(async () => {\n    const rootElement: HTMLElement | null = document.getElementById('root');\n\n    window.envProd = process.env.REACT_APP_DIST_ENV === EnvironmentVariables.Production;\n    window.envDev = process.env.REACT_APP_DIST_ENV === EnvironmentVariables.Development;\n\n    await (() => {\n        if (window.envProd) initProduction();\n        else initDevelopment();\n    })();\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>, rootElement\n    );\n})();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}